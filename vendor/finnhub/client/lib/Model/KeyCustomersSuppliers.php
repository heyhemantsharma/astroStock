<?php
/**
 * KeyCustomersSuppliers
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * KeyCustomersSuppliers Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class KeyCustomersSuppliers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'KeyCustomersSuppliers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'name' => 'string',
        'country' => 'string',
        'industry' => 'string',
        'customer' => 'bool',
        'supplier' => 'bool',
        'one_month_correlation' => 'float',
        'one_year_correlation' => 'float',
        'six_month_correlation' => 'float',
        'three_month_correlation' => 'float',
        'two_week_correlation' => 'float',
        'two_year_correlation' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'name' => null,
        'country' => null,
        'industry' => null,
        'customer' => null,
        'supplier' => null,
        'one_month_correlation' => 'float',
        'one_year_correlation' => 'float',
        'six_month_correlation' => 'float',
        'three_month_correlation' => 'float',
        'two_week_correlation' => 'float',
        'two_year_correlation' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'name' => 'name',
        'country' => 'country',
        'industry' => 'industry',
        'customer' => 'customer',
        'supplier' => 'supplier',
        'one_month_correlation' => 'oneMonthCorrelation',
        'one_year_correlation' => 'oneYearCorrelation',
        'six_month_correlation' => 'sixMonthCorrelation',
        'three_month_correlation' => 'threeMonthCorrelation',
        'two_week_correlation' => 'twoWeekCorrelation',
        'two_year_correlation' => 'twoYearCorrelation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'name' => 'setName',
        'country' => 'setCountry',
        'industry' => 'setIndustry',
        'customer' => 'setCustomer',
        'supplier' => 'setSupplier',
        'one_month_correlation' => 'setOneMonthCorrelation',
        'one_year_correlation' => 'setOneYearCorrelation',
        'six_month_correlation' => 'setSixMonthCorrelation',
        'three_month_correlation' => 'setThreeMonthCorrelation',
        'two_week_correlation' => 'setTwoWeekCorrelation',
        'two_year_correlation' => 'setTwoYearCorrelation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'name' => 'getName',
        'country' => 'getCountry',
        'industry' => 'getIndustry',
        'customer' => 'getCustomer',
        'supplier' => 'getSupplier',
        'one_month_correlation' => 'getOneMonthCorrelation',
        'one_year_correlation' => 'getOneYearCorrelation',
        'six_month_correlation' => 'getSixMonthCorrelation',
        'three_month_correlation' => 'getThreeMonthCorrelation',
        'two_week_correlation' => 'getTwoWeekCorrelation',
        'two_year_correlation' => 'getTwoYearCorrelation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['industry'] = $data['industry'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['supplier'] = $data['supplier'] ?? null;
        $this->container['one_month_correlation'] = $data['one_month_correlation'] ?? null;
        $this->container['one_year_correlation'] = $data['one_year_correlation'] ?? null;
        $this->container['six_month_correlation'] = $data['six_month_correlation'] ?? null;
        $this->container['three_month_correlation'] = $data['three_month_correlation'] ?? null;
        $this->container['two_week_correlation'] = $data['two_week_correlation'] ?? null;
        $this->container['two_year_correlation'] = $data['two_year_correlation'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string|null
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string|null $industry Industry
     *
     * @return self
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return bool|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param bool|null $customer Whether the company is a customer.
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return bool|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param bool|null $supplier Whether the company is a supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets one_month_correlation
     *
     * @return float|null
     */
    public function getOneMonthCorrelation()
    {
        return $this->container['one_month_correlation'];
    }

    /**
     * Sets one_month_correlation
     *
     * @param float|null $one_month_correlation 1-month price correlation
     *
     * @return self
     */
    public function setOneMonthCorrelation($one_month_correlation)
    {
        $this->container['one_month_correlation'] = $one_month_correlation;

        return $this;
    }

    /**
     * Gets one_year_correlation
     *
     * @return float|null
     */
    public function getOneYearCorrelation()
    {
        return $this->container['one_year_correlation'];
    }

    /**
     * Sets one_year_correlation
     *
     * @param float|null $one_year_correlation 1-year price correlation
     *
     * @return self
     */
    public function setOneYearCorrelation($one_year_correlation)
    {
        $this->container['one_year_correlation'] = $one_year_correlation;

        return $this;
    }

    /**
     * Gets six_month_correlation
     *
     * @return float|null
     */
    public function getSixMonthCorrelation()
    {
        return $this->container['six_month_correlation'];
    }

    /**
     * Sets six_month_correlation
     *
     * @param float|null $six_month_correlation 6-month price correlation
     *
     * @return self
     */
    public function setSixMonthCorrelation($six_month_correlation)
    {
        $this->container['six_month_correlation'] = $six_month_correlation;

        return $this;
    }

    /**
     * Gets three_month_correlation
     *
     * @return float|null
     */
    public function getThreeMonthCorrelation()
    {
        return $this->container['three_month_correlation'];
    }

    /**
     * Sets three_month_correlation
     *
     * @param float|null $three_month_correlation 3-month price correlation
     *
     * @return self
     */
    public function setThreeMonthCorrelation($three_month_correlation)
    {
        $this->container['three_month_correlation'] = $three_month_correlation;

        return $this;
    }

    /**
     * Gets two_week_correlation
     *
     * @return float|null
     */
    public function getTwoWeekCorrelation()
    {
        return $this->container['two_week_correlation'];
    }

    /**
     * Sets two_week_correlation
     *
     * @param float|null $two_week_correlation 2-week price correlation
     *
     * @return self
     */
    public function setTwoWeekCorrelation($two_week_correlation)
    {
        $this->container['two_week_correlation'] = $two_week_correlation;

        return $this;
    }

    /**
     * Gets two_year_correlation
     *
     * @return float|null
     */
    public function getTwoYearCorrelation()
    {
        return $this->container['two_year_correlation'];
    }

    /**
     * Sets two_year_correlation
     *
     * @param float|null $two_year_correlation 2-year price correlation
     *
     * @return self
     */
    public function setTwoYearCorrelation($two_year_correlation)
    {
        $this->container['two_year_correlation'] = $two_year_correlation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


