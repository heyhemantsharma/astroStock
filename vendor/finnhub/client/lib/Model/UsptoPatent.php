<?php
/**
 * UsptoPatent
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * UsptoPatent Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UsptoPatent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UsptoPatent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'application_number' => 'string',
        'company_filing_name' => 'string[]',
        'filing_date' => 'string',
        'description' => 'string',
        'filing_status' => 'string',
        'patent_number' => 'string',
        'publication_date' => 'string',
        'patent_type' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'application_number' => null,
        'company_filing_name' => null,
        'filing_date' => null,
        'description' => null,
        'filing_status' => null,
        'patent_number' => null,
        'publication_date' => null,
        'patent_type' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_number' => 'applicationNumber',
        'company_filing_name' => 'companyFilingName',
        'filing_date' => 'filingDate',
        'description' => 'description',
        'filing_status' => 'filingStatus',
        'patent_number' => 'patentNumber',
        'publication_date' => 'publicationDate',
        'patent_type' => 'patentType',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_number' => 'setApplicationNumber',
        'company_filing_name' => 'setCompanyFilingName',
        'filing_date' => 'setFilingDate',
        'description' => 'setDescription',
        'filing_status' => 'setFilingStatus',
        'patent_number' => 'setPatentNumber',
        'publication_date' => 'setPublicationDate',
        'patent_type' => 'setPatentType',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_number' => 'getApplicationNumber',
        'company_filing_name' => 'getCompanyFilingName',
        'filing_date' => 'getFilingDate',
        'description' => 'getDescription',
        'filing_status' => 'getFilingStatus',
        'patent_number' => 'getPatentNumber',
        'publication_date' => 'getPublicationDate',
        'patent_type' => 'getPatentType',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['application_number'] = $data['application_number'] ?? null;
        $this->container['company_filing_name'] = $data['company_filing_name'] ?? null;
        $this->container['filing_date'] = $data['filing_date'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['filing_status'] = $data['filing_status'] ?? null;
        $this->container['patent_number'] = $data['patent_number'] ?? null;
        $this->container['publication_date'] = $data['publication_date'] ?? null;
        $this->container['patent_type'] = $data['patent_type'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_number
     *
     * @return string|null
     */
    public function getApplicationNumber()
    {
        return $this->container['application_number'];
    }

    /**
     * Sets application_number
     *
     * @param string|null $application_number Application Number.
     *
     * @return self
     */
    public function setApplicationNumber($application_number)
    {
        $this->container['application_number'] = $application_number;

        return $this;
    }

    /**
     * Gets company_filing_name
     *
     * @return string[]|null
     */
    public function getCompanyFilingName()
    {
        return $this->container['company_filing_name'];
    }

    /**
     * Sets company_filing_name
     *
     * @param string[]|null $company_filing_name Array of companies' name on the patent.
     *
     * @return self
     */
    public function setCompanyFilingName($company_filing_name)
    {
        $this->container['company_filing_name'] = $company_filing_name;

        return $this;
    }

    /**
     * Gets filing_date
     *
     * @return string|null
     */
    public function getFilingDate()
    {
        return $this->container['filing_date'];
    }

    /**
     * Sets filing_date
     *
     * @param string|null $filing_date Filing date.
     *
     * @return self
     */
    public function setFilingDate($filing_date)
    {
        $this->container['filing_date'] = $filing_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets filing_status
     *
     * @return string|null
     */
    public function getFilingStatus()
    {
        return $this->container['filing_status'];
    }

    /**
     * Sets filing_status
     *
     * @param string|null $filing_status Filing status.
     *
     * @return self
     */
    public function setFilingStatus($filing_status)
    {
        $this->container['filing_status'] = $filing_status;

        return $this;
    }

    /**
     * Gets patent_number
     *
     * @return string|null
     */
    public function getPatentNumber()
    {
        return $this->container['patent_number'];
    }

    /**
     * Sets patent_number
     *
     * @param string|null $patent_number Patent number.
     *
     * @return self
     */
    public function setPatentNumber($patent_number)
    {
        $this->container['patent_number'] = $patent_number;

        return $this;
    }

    /**
     * Gets publication_date
     *
     * @return string|null
     */
    public function getPublicationDate()
    {
        return $this->container['publication_date'];
    }

    /**
     * Sets publication_date
     *
     * @param string|null $publication_date Publication date.
     *
     * @return self
     */
    public function setPublicationDate($publication_date)
    {
        $this->container['publication_date'] = $publication_date;

        return $this;
    }

    /**
     * Gets patent_type
     *
     * @return string|null
     */
    public function getPatentType()
    {
        return $this->container['patent_type'];
    }

    /**
     * Sets patent_type
     *
     * @param string|null $patent_type Patent's type.
     *
     * @return self
     */
    public function setPatentType($patent_type)
    {
        $this->container['patent_type'] = $patent_type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL of the original article.
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


