<?php
/**
 * CryptoProfile
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * CryptoProfile Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CryptoProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CryptoProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'long_name' => 'string',
        'name' => 'string',
        'description' => 'string',
        'website' => 'string',
        'market_cap' => 'float',
        'total_supply' => 'float',
        'max_supply' => 'float',
        'circulating_supply' => 'float',
        'logo' => 'string',
        'launch_date' => 'string',
        'proof_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'long_name' => null,
        'name' => null,
        'description' => null,
        'website' => null,
        'market_cap' => 'float',
        'total_supply' => 'float',
        'max_supply' => 'float',
        'circulating_supply' => 'float',
        'logo' => null,
        'launch_date' => null,
        'proof_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'long_name' => 'longName',
        'name' => 'name',
        'description' => 'description',
        'website' => 'website',
        'market_cap' => 'marketCap',
        'total_supply' => 'totalSupply',
        'max_supply' => 'maxSupply',
        'circulating_supply' => 'circulatingSupply',
        'logo' => 'logo',
        'launch_date' => 'launchDate',
        'proof_type' => 'proofType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'long_name' => 'setLongName',
        'name' => 'setName',
        'description' => 'setDescription',
        'website' => 'setWebsite',
        'market_cap' => 'setMarketCap',
        'total_supply' => 'setTotalSupply',
        'max_supply' => 'setMaxSupply',
        'circulating_supply' => 'setCirculatingSupply',
        'logo' => 'setLogo',
        'launch_date' => 'setLaunchDate',
        'proof_type' => 'setProofType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'long_name' => 'getLongName',
        'name' => 'getName',
        'description' => 'getDescription',
        'website' => 'getWebsite',
        'market_cap' => 'getMarketCap',
        'total_supply' => 'getTotalSupply',
        'max_supply' => 'getMaxSupply',
        'circulating_supply' => 'getCirculatingSupply',
        'logo' => 'getLogo',
        'launch_date' => 'getLaunchDate',
        'proof_type' => 'getProofType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['long_name'] = $data['long_name'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
        $this->container['market_cap'] = $data['market_cap'] ?? null;
        $this->container['total_supply'] = $data['total_supply'] ?? null;
        $this->container['max_supply'] = $data['max_supply'] ?? null;
        $this->container['circulating_supply'] = $data['circulating_supply'] ?? null;
        $this->container['logo'] = $data['logo'] ?? null;
        $this->container['launch_date'] = $data['launch_date'] ?? null;
        $this->container['proof_type'] = $data['proof_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets long_name
     *
     * @return string|null
     */
    public function getLongName()
    {
        return $this->container['long_name'];
    }

    /**
     * Sets long_name
     *
     * @param string|null $long_name Long name.
     *
     * @return self
     */
    public function setLongName($long_name)
    {
        $this->container['long_name'] = $long_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Project's website.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets market_cap
     *
     * @return float|null
     */
    public function getMarketCap()
    {
        return $this->container['market_cap'];
    }

    /**
     * Sets market_cap
     *
     * @param float|null $market_cap Market capitalization.
     *
     * @return self
     */
    public function setMarketCap($market_cap)
    {
        $this->container['market_cap'] = $market_cap;

        return $this;
    }

    /**
     * Gets total_supply
     *
     * @return float|null
     */
    public function getTotalSupply()
    {
        return $this->container['total_supply'];
    }

    /**
     * Sets total_supply
     *
     * @param float|null $total_supply Total supply.
     *
     * @return self
     */
    public function setTotalSupply($total_supply)
    {
        $this->container['total_supply'] = $total_supply;

        return $this;
    }

    /**
     * Gets max_supply
     *
     * @return float|null
     */
    public function getMaxSupply()
    {
        return $this->container['max_supply'];
    }

    /**
     * Sets max_supply
     *
     * @param float|null $max_supply Max supply.
     *
     * @return self
     */
    public function setMaxSupply($max_supply)
    {
        $this->container['max_supply'] = $max_supply;

        return $this;
    }

    /**
     * Gets circulating_supply
     *
     * @return float|null
     */
    public function getCirculatingSupply()
    {
        return $this->container['circulating_supply'];
    }

    /**
     * Sets circulating_supply
     *
     * @param float|null $circulating_supply Circulating supply.
     *
     * @return self
     */
    public function setCirculatingSupply($circulating_supply)
    {
        $this->container['circulating_supply'] = $circulating_supply;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo Logo image.
     *
     * @return self
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets launch_date
     *
     * @return string|null
     */
    public function getLaunchDate()
    {
        return $this->container['launch_date'];
    }

    /**
     * Sets launch_date
     *
     * @param string|null $launch_date Launch date.
     *
     * @return self
     */
    public function setLaunchDate($launch_date)
    {
        $this->container['launch_date'] = $launch_date;

        return $this;
    }

    /**
     * Gets proof_type
     *
     * @return string|null
     */
    public function getProofType()
    {
        return $this->container['proof_type'];
    }

    /**
     * Sets proof_type
     *
     * @param string|null $proof_type Proof type.
     *
     * @return self
     */
    public function setProofType($proof_type)
    {
        $this->container['proof_type'] = $proof_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


