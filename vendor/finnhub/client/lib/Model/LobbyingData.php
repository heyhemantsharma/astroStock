<?php
/**
 * LobbyingData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * LobbyingData Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LobbyingData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LobbyingData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'name' => 'string',
        'description' => 'string',
        'country' => 'string',
        'year' => 'int',
        'period' => 'string',
        'income' => 'float',
        'expenses' => 'float',
        'document_url' => 'string',
        'posted_name' => 'string',
        'date' => 'string',
        'client_id' => 'string',
        'registrant_id' => 'string',
        'senate_id' => 'string',
        'houseregistrant_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'name' => null,
        'description' => null,
        'country' => null,
        'year' => 'int64',
        'period' => null,
        'income' => 'float',
        'expenses' => 'float',
        'document_url' => null,
        'posted_name' => null,
        'date' => null,
        'client_id' => null,
        'registrant_id' => null,
        'senate_id' => null,
        'houseregistrant_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'name' => 'name',
        'description' => 'description',
        'country' => 'country',
        'year' => 'year',
        'period' => 'period',
        'income' => 'income',
        'expenses' => 'expenses',
        'document_url' => 'documentUrl',
        'posted_name' => 'postedName',
        'date' => 'date',
        'client_id' => 'clientId',
        'registrant_id' => 'registrantId',
        'senate_id' => 'senateId',
        'houseregistrant_id' => 'houseregistrantId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'name' => 'setName',
        'description' => 'setDescription',
        'country' => 'setCountry',
        'year' => 'setYear',
        'period' => 'setPeriod',
        'income' => 'setIncome',
        'expenses' => 'setExpenses',
        'document_url' => 'setDocumentUrl',
        'posted_name' => 'setPostedName',
        'date' => 'setDate',
        'client_id' => 'setClientId',
        'registrant_id' => 'setRegistrantId',
        'senate_id' => 'setSenateId',
        'houseregistrant_id' => 'setHouseregistrantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'name' => 'getName',
        'description' => 'getDescription',
        'country' => 'getCountry',
        'year' => 'getYear',
        'period' => 'getPeriod',
        'income' => 'getIncome',
        'expenses' => 'getExpenses',
        'document_url' => 'getDocumentUrl',
        'posted_name' => 'getPostedName',
        'date' => 'getDate',
        'client_id' => 'getClientId',
        'registrant_id' => 'getRegistrantId',
        'senate_id' => 'getSenateId',
        'houseregistrant_id' => 'getHouseregistrantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['year'] = $data['year'] ?? null;
        $this->container['period'] = $data['period'] ?? null;
        $this->container['income'] = $data['income'] ?? null;
        $this->container['expenses'] = $data['expenses'] ?? null;
        $this->container['document_url'] = $data['document_url'] ?? null;
        $this->container['posted_name'] = $data['posted_name'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['client_id'] = $data['client_id'] ?? null;
        $this->container['registrant_id'] = $data['registrant_id'] ?? null;
        $this->container['senate_id'] = $data['senate_id'] ?? null;
        $this->container['houseregistrant_id'] = $data['houseregistrant_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Symbol.
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Company's name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country.
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int|null $year Year.
     *
     * @return self
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period Period.
     *
     * @return self
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets income
     *
     * @return float|null
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param float|null $income Income reported by lobbying firms.
     *
     * @return self
     */
    public function setIncome($income)
    {
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets expenses
     *
     * @return float|null
     */
    public function getExpenses()
    {
        return $this->container['expenses'];
    }

    /**
     * Sets expenses
     *
     * @param float|null $expenses Expenses reported by the company.
     *
     * @return self
     */
    public function setExpenses($expenses)
    {
        $this->container['expenses'] = $expenses;

        return $this;
    }

    /**
     * Gets document_url
     *
     * @return string|null
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     *
     * @param string|null $document_url Document's URL.
     *
     * @return self
     */
    public function setDocumentUrl($document_url)
    {
        $this->container['document_url'] = $document_url;

        return $this;
    }

    /**
     * Gets posted_name
     *
     * @return string|null
     */
    public function getPostedName()
    {
        return $this->container['posted_name'];
    }

    /**
     * Sets posted_name
     *
     * @param string|null $posted_name Posted name.
     *
     * @return self
     */
    public function setPostedName($posted_name)
    {
        $this->container['posted_name'] = $posted_name;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Date.
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Client ID.
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets registrant_id
     *
     * @return string|null
     */
    public function getRegistrantId()
    {
        return $this->container['registrant_id'];
    }

    /**
     * Sets registrant_id
     *
     * @param string|null $registrant_id Registrant ID.
     *
     * @return self
     */
    public function setRegistrantId($registrant_id)
    {
        $this->container['registrant_id'] = $registrant_id;

        return $this;
    }

    /**
     * Gets senate_id
     *
     * @return string|null
     */
    public function getSenateId()
    {
        return $this->container['senate_id'];
    }

    /**
     * Sets senate_id
     *
     * @param string|null $senate_id Senate ID.
     *
     * @return self
     */
    public function setSenateId($senate_id)
    {
        $this->container['senate_id'] = $senate_id;

        return $this;
    }

    /**
     * Gets houseregistrant_id
     *
     * @return string|null
     */
    public function getHouseregistrantId()
    {
        return $this->container['houseregistrant_id'];
    }

    /**
     * Sets houseregistrant_id
     *
     * @param string|null $houseregistrant_id House registrant ID.
     *
     * @return self
     */
    public function setHouseregistrantId($houseregistrant_id)
    {
        $this->container['houseregistrant_id'] = $houseregistrant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


