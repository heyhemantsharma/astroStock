<?php
/**
 * CompanyProfile2
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * CompanyProfile2 Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CompanyProfile2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyProfile2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'currency' => 'string',
        'exchange' => 'string',
        'name' => 'string',
        'ticker' => 'string',
        'ipo' => '\DateTime',
        'market_capitalization' => 'float',
        'share_outstanding' => 'float',
        'logo' => 'string',
        'phone' => 'string',
        'weburl' => 'string',
        'finnhub_industry' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => null,
        'currency' => null,
        'exchange' => null,
        'name' => null,
        'ticker' => null,
        'ipo' => 'date',
        'market_capitalization' => 'float',
        'share_outstanding' => 'float',
        'logo' => null,
        'phone' => null,
        'weburl' => null,
        'finnhub_industry' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'currency' => 'currency',
        'exchange' => 'exchange',
        'name' => 'name',
        'ticker' => 'ticker',
        'ipo' => 'ipo',
        'market_capitalization' => 'marketCapitalization',
        'share_outstanding' => 'shareOutstanding',
        'logo' => 'logo',
        'phone' => 'phone',
        'weburl' => 'weburl',
        'finnhub_industry' => 'finnhubIndustry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'currency' => 'setCurrency',
        'exchange' => 'setExchange',
        'name' => 'setName',
        'ticker' => 'setTicker',
        'ipo' => 'setIpo',
        'market_capitalization' => 'setMarketCapitalization',
        'share_outstanding' => 'setShareOutstanding',
        'logo' => 'setLogo',
        'phone' => 'setPhone',
        'weburl' => 'setWeburl',
        'finnhub_industry' => 'setFinnhubIndustry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'currency' => 'getCurrency',
        'exchange' => 'getExchange',
        'name' => 'getName',
        'ticker' => 'getTicker',
        'ipo' => 'getIpo',
        'market_capitalization' => 'getMarketCapitalization',
        'share_outstanding' => 'getShareOutstanding',
        'logo' => 'getLogo',
        'phone' => 'getPhone',
        'weburl' => 'getWeburl',
        'finnhub_industry' => 'getFinnhubIndustry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = $data['country'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['exchange'] = $data['exchange'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['ticker'] = $data['ticker'] ?? null;
        $this->container['ipo'] = $data['ipo'] ?? null;
        $this->container['market_capitalization'] = $data['market_capitalization'] ?? null;
        $this->container['share_outstanding'] = $data['share_outstanding'] ?? null;
        $this->container['logo'] = $data['logo'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['weburl'] = $data['weburl'] ?? null;
        $this->container['finnhub_industry'] = $data['finnhub_industry'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country of company's headquarter.
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency used in company filings.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return string|null
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param string|null $exchange Listed exchange.
     *
     * @return self
     */
    public function setExchange($exchange)
    {
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Company name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string|null
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string|null $ticker Company symbol/ticker as used on the listed exchange.
     *
     * @return self
     */
    public function setTicker($ticker)
    {
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets ipo
     *
     * @return \DateTime|null
     */
    public function getIpo()
    {
        return $this->container['ipo'];
    }

    /**
     * Sets ipo
     *
     * @param \DateTime|null $ipo IPO date.
     *
     * @return self
     */
    public function setIpo($ipo)
    {
        $this->container['ipo'] = $ipo;

        return $this;
    }

    /**
     * Gets market_capitalization
     *
     * @return float|null
     */
    public function getMarketCapitalization()
    {
        return $this->container['market_capitalization'];
    }

    /**
     * Sets market_capitalization
     *
     * @param float|null $market_capitalization Market Capitalization.
     *
     * @return self
     */
    public function setMarketCapitalization($market_capitalization)
    {
        $this->container['market_capitalization'] = $market_capitalization;

        return $this;
    }

    /**
     * Gets share_outstanding
     *
     * @return float|null
     */
    public function getShareOutstanding()
    {
        return $this->container['share_outstanding'];
    }

    /**
     * Sets share_outstanding
     *
     * @param float|null $share_outstanding Number of oustanding shares.
     *
     * @return self
     */
    public function setShareOutstanding($share_outstanding)
    {
        $this->container['share_outstanding'] = $share_outstanding;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo Logo image.
     *
     * @return self
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Company phone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets weburl
     *
     * @return string|null
     */
    public function getWeburl()
    {
        return $this->container['weburl'];
    }

    /**
     * Sets weburl
     *
     * @param string|null $weburl Company website.
     *
     * @return self
     */
    public function setWeburl($weburl)
    {
        $this->container['weburl'] = $weburl;

        return $this;
    }

    /**
     * Gets finnhub_industry
     *
     * @return string|null
     */
    public function getFinnhubIndustry()
    {
        return $this->container['finnhub_industry'];
    }

    /**
     * Sets finnhub_industry
     *
     * @param string|null $finnhub_industry Finnhub industry classification.
     *
     * @return self
     */
    public function setFinnhubIndustry($finnhub_industry)
    {
        $this->container['finnhub_industry'] = $finnhub_industry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


